= Tasarım Kalıpları Dersi Composite Pattern


== C# Source Code

.Composite.cs
[source,c++]
----
using System;
using System.Collections.Generic;

namespace Composite
{
    public static class Program
    {
        public static void Main()
        {
            Intern mfk = new Intern("mfk", 0);
            Intern ark = new Intern("ark", 0);
            
            Intern mehmet = new Intern("mehmet", 0);
            Intern fırat = new Intern("fırat", 1);
            
            LeadDeveloper komurcu = new LeadDeveloper("Komurcu", 6);
            LeadDeveloper ali = new LeadDeveloper("Komurcu", 8);
            
            komurcu.AddSoftwareEngineer(mfk); // <3>
            komurcu.AddSoftwareEngineer(ark);
            
            ali.AddSoftwareEngineer(mehmet);
            ali.AddSoftwareEngineer(fırat);
            
            komurcu.DescribeYourself();
            ali.DescribeYourself();
            
        }
    }

    public interface ISoftwareEngineer // <1>
    {
        void DescribeYourself();
    }

    public class Intern : ISoftwareEngineer // <2>
    {
        private readonly string _name;
        private readonly long _experience;

        public Intern(string name, long experience)
        {
            _name = name;
            _experience = experience;
        }
        
        public void DescribeYourself()
        {
            Console.WriteLine($"I am {_name} and I have {_experience} year experience");
        }
    }
    
    public class LeadDeveloper : ISoftwareEngineer // <3>
    {
        private readonly string _name;
        private readonly long _experience;
        
        private readonly List<ISoftwareEngineer> _softwareEngineers = new List<ISoftwareEngineer>();

        public LeadDeveloper(string name, long experience)
        {
            _name = name;
            _experience = experience;
        }

        public void AddSoftwareEngineer(ISoftwareEngineer softwareEngineer)
        {
            _softwareEngineers.Add(softwareEngineer);
        }
        
        public void RemoveSoftwareEngineer(ISoftwareEngineer softwareEngineer)
        {
            _softwareEngineers.Remove(softwareEngineer);
        }
        
        public void DescribeYourself() // <4>
        {
            Console.WriteLine($"I am {_name}, I have {_experience} year experience and I'm leading these people: ");
            foreach (var softwareEngineer in _softwareEngineers)
            {
                softwareEngineer.DescribeYourself();
            }
        }
    }
}

<1> interface that every node(intern and lead developer) will implement
<2> leaf node in tree
<3> node that can have children
<4> Write all the child node's descriptions
----

== Console Output
image::ConsoleOutput.png[ConsoleOutput, 500, 500]
image::uml.png[UML, 500, 500]

Composite Pattern Hiyerarşik yapıya sahip bir dizi objeyi ağaç yapısında tutarak verimli 
bir şekilde bu düğümler üzerinde işlemler yapmamıza olanak sağlar. Çıktıda da Lead Developer
ve Intern objeleri ile hiyerarşik yapı gösterilmiştir. 

Bu örnekte kullanma nedenim elimdeki bilgilerin üst-alt hiyerarşisine sahip bir yapıda 
oluşmasından dolayıdır. Bu pattern ile yapı içerisinde kolayca işlemler yapabiliyorum.